BFSHEURISTIC.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bfsheuristics;

import java.util.ArrayList;
import java.util.PriorityQueue;
import javax.swing.JOptionPane;


public class BFSHeuristics {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        int n;
//        Scanner sc = new Scanner(System.in);
//        n = sc.nextInt();
//    
         n=Integer.parseInt(JOptionPane.showInputDialog("Enter No of nodes"));              // Enter no. of rows
        
         PriorityQueue<HeadNode> open = new PriorityQueue<>(new FxComparator());             // Initilize priority queue openlist
        ArrayList<HeadNode> closed = new ArrayList<>(n);                                     // Initialize closed list
        ArrayList<String> parent = new ArrayList<>(n);                                      // Store parent node
        for(int i=0;i<n;i++)
        {
            parent.add("NIL");                                                              // Set parent of all nodes NIL
        }
        
        Graph graph = new Graph(n);                                                         // Create graph instance
        graph.initGraph();                                                                  // Initialize graph
        graph.displayGraph();                                                               // Display graph as adjacency list
        
        String start, goal;                                                                 // Accept start and goal nodes
        start = JOptionPane.showInputDialog("Enter the name of start node : ");
        
        goal = JOptionPane.showInputDialog("Enter the name of goal node : ");
        
        open.add(graph.getHeadNode(start));                                                 // Add start node to open list
        parent.set(graph.getIndex(start), "NIL");                                           // Set parent of start NIL


        displayQueue(open);
        displayClosed(closed);
        
        while(!open.isEmpty())                                                              // Process until open list is not empty
        {
            HeadNode temp = open.poll();                                                    // Remove node with minimum fx from open list
            closed.add(temp);                                                               // Add it to closed list
            displayQueue(open);
            displayClosed(closed);
            if(temp.getName().equals(goal))                                                 // Check if goal node is found
            {
  
                System.out.println("\nGoal node '"+temp.getName() + "'  found");
                break;
            }
            else
            {
                ArrayList<Node> neighbours = temp.getNodeList();                            // Get the neighbours of the retrieved node
                for(Node n1:neighbours)                                                     // For all adjacent nodes
                {
                    if(inClosed(n1.getName(), closed))                                      // If node in closed list, process next node
                        continue;
                    if(!inOpen(n1.getName(), open))                                         // Check if not in open list
                    {
                      
                        open.add(graph.getHeadNode(n1.getName()));                          // Add it toopen list
                        parent.set(graph.getIndex(n1.getName()), temp.getName());           // Set parent of neighbour node
                    }
                }
                displayQueue(open);
            }
         
            
        }
        
        tracePath(parent, graph, goal);
    }
    
    
    private static void displayQueue(PriorityQueue<HeadNode> open)                          // Fuction to display queue open list
    {
        System.out.print("\nOpen List : ");
        if(open.isEmpty())
        {
            System.out.println("Empty");
            return;
        }
        for(HeadNode n: open)
        {
            System.out.print(n.getName()+"\t");
        }
        System.out.println("");
    }
    
    private static void displayClosed(ArrayList<HeadNode> closed)                          // Fuction to display closed list
    {
        System.out.print("\nClosed List : ");
        if(closed.isEmpty())
        {
            System.out.println("Empty");
            return;
        }
        for(HeadNode n: closed)
        {
            System.out.print(n.getName()+"\t");
        }
        System.out.println("");
    }
    
    private static boolean inClosed(String name, ArrayList<HeadNode> closed)               // Check if node in closed list
    {
        for(HeadNode n: closed)
        {
            if(n.getName().equals(name))
                return true;
        }
        return false;
    }
    
    private static boolean inOpen(String name, PriorityQueue<HeadNode> open)              // Check if node in closed list
    {
        for(HeadNode n: open)
        {
            if(n.getName().equals(name))
                return true;
        }
        return false;
    }
    
    private static void tracePath(ArrayList<String> parent, Graph graph, String goal)       // Function to trace the path
    {
        System.out.println("\n\nPath : ");
        String path = goal;
        String temp = goal;
        while(!parent.get(graph.getIndex(temp)).equals("NIL"))                              // Continue path till parent is not NIL
        {
            temp = parent.get(graph.getIndex(temp));
            path = temp + ", " + path;
        }
        
        System.out.println(path);
    }
}


/*

OUTPUT:

run:

A (hx = 10) : (B), (C)
B (hx = 3) : (D)
C (hx = 7) : (D)
D (hx = 0) : 

Open List : A	

Closed List : Empty

Open List : Empty

Closed List : A	

Open List : B	C	

Open List : C	

Closed List : A	B	

Open List : D	C	

Open List : C	

Closed List : A	B	D	

Goal node 'D'  found


Path : 
A, B, D
BUILD SUCCESSFUL (total time: 1 minute 50 seconds)

*/

------------------------

NODE.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bfsheuristics;


public class Node                                           // Adjacent node name
{
    String name;
    
    public Node(String name)
    {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
   
    
}

------------------------
Headnode.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bfsheuristics;

import java.util.ArrayList;
import java.util.Iterator;


public class HeadNode                                           // Adjacency list head node
{
    private String name;                                        // node name
    private int hx;                                             // heuristic value hx
    private int fx;                                             // fx = hx value
    private ArrayList<Node> adjnodes = new ArrayList<>();       // Adjacent nodes list
    
    public HeadNode()                                           // Initialize hx and fx to infinity 
    {
        hx=999;
        fx = hx;
    }

    

    public int getHx() {                                  
        return hx;
    }

    public void setHx(int hx) {                                 // Set hx and update fx accordingly
        this.hx = hx;
        setFx(this.hx);
    }

    public int getFx() {
        return fx;
    }

    public void setFx(int fx) {
        this.fx = fx;
    }
    
    
    
    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setNodeInfo(String name)                        // Set adjacent node name and distance
    {
        Node n = new Node(name);
        adjnodes.add(n);                                        // Add node to list
    }
 
    public ArrayList getNodeList()
    {
        return adjnodes;
    }
    
    public void displayNodeList()                              // Display adjacent nodes list (name,distance)
    {
                
        Iterator i = adjnodes.iterator();
        if(i.hasNext())
        {
            Node temp= (Node)i.next();
            System.out.print("("+temp.getName()+")");
        
        }
        while(i.hasNext())
        {
            Node temp= (Node)i.next();
            System.out.print(", ("+temp.getName()+")");
        }
    }
    
}

------------------------
graph.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bfsheuristics;

import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;


public class Graph {                                                  // Class for graph
    
    ArrayList<HeadNode> headNodesList;
    int n;
    
    public Graph(int size)                                            // Initialize size and head node list
    {
        this.n = size;
        headNodesList = new ArrayList<>();
    }
    
    public void initGraph()                                           // Initialize graph nodes and edges
    {
        Scanner sc = new Scanner(System.in);
        for(int i=0;i<n;i++)                                          // Accept node names and their heuristic values
        {
            
            HeadNode hn = new HeadNode();
            hn.setName(JOptionPane.showInputDialog("Enter the name of node " +(i+1)+" : "));
            hn.setHx(Integer.parseInt(JOptionPane.showInputDialog("Enter the heuristic value of node " +(i+1)+" : ")));
            headNodesList.add(hn);
          
        }
        for(int i=0;i<n;i++)
        {
            HeadNode tempHeadNode = headNodesList.get(i);
            
            while(true)                                              // Accept adjacent nodes and their distances
            {
                String name = tempHeadNode.getName();
                String ans = JOptionPane.showInputDialog("\nDo you want to add any adjacent node to node "+ name + "? (y/n) : ");
                if(ans.equals("n")  || ans.equals("N"))
                    break;
               // sc.skip("\n");
                String tempName=JOptionPane.showInputDialog("Enter the name of adjacent node of "+ name + " : ");
                //sc.skip("\n");
                                    
                tempHeadNode.setNodeInfo(tempName);
                headNodesList.set(i, tempHeadNode);
            
            }
        }
    }
    
    public void displayGraph()                                       // Display graph adjacency list
    {
        for(int i=0;i<n;i++)
        {
            HeadNode tempHeadNode = headNodesList.get(i);
            System.out.print("\n"+ tempHeadNode.getName() + " (hx = "+tempHeadNode.getHx()+") : ");
            tempHeadNode.displayNodeList();
        }
        System.out.println("");
    }
    
    public int getIndex(String name)                                 // Get index for given name
    {
        for(int i=0;i<n;i++)
        {
            HeadNode tempHeadNode = headNodesList.get(i);
            if(tempHeadNode.getName().equals(name))
                return i;
        }
        return -1;
    }
    
    public ArrayList getNeighbours(String node)                      // Get neighbour nodes list
    {
        int headIndex=getIndex(node);
        return headNodesList.get(headIndex).getNodeList();
    }
    
    
    
    public HeadNode getHeadNode (String name){                       // Get Head node by name
        return headNodesList.get(getIndex(name));
    }
    
    /*
    public void setFx(Node neighbour, HeadNode curr)                 // Set fx for neighbour via current node
    {
        int tempGx = curr.getGx() + neighbour.getDistance();         // Get distance from source to neighbour via current node
        HeadNode adj = getHeadNode(neighbour.getName());             // Get adjacent head node
        if(tempGx >= adj.getGx())                                    // Check if calculated distance is less than previous distance
            return;
        
        adj.setGx(tempGx);                                           // Set gx as calculated distance
        headNodesList.set(getIndex(adj.getName()), adj);             // Update headnode list
    }*/
}
------------------------
fxcomparator.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bfsheuristics;

import java.util.Comparator;


public class FxComparator implements Comparator<HeadNode>               // Comparator for priority queue based on fx value
{

    @Override
    public int compare(HeadNode o1, HeadNode o2) {
        if(o1.getFx()> o2.getFx())
            return 1;
        else if(o1.getFx() < o2.getFx())
            return -1;
        return 0;
    }
    
}

**************************************************************************************

Astargraph.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.ArrayList;
import java.util.PriorityQueue;
import javax.swing.JOptionPane;


public class AStarGraph {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        int n;
//        Scanner sc = new Scanner(System.in);
//        n = sc.nextInt();
//    
         n=Integer.parseInt(JOptionPane.showInputDialog("Enter No of nodes"));              // Enter no. of rows
        
         PriorityQueue<HeadNode> open = new PriorityQueue<>(new FxComparator());             // Initilize priority queue openlist
        ArrayList<HeadNode> closed = new ArrayList<>(n);                                     // Initialize closed list
        ArrayList<String> parent = new ArrayList<>(n);                                      // Store parent node
        for(int i=0;i<n;i++)
        {
            parent.add("NIL");                                                              // Set parent of all nodes NIL
        }
        
        Graph graph = new Graph(n);                                                         // Create graph instance
        graph.initGraph();                                                                  // Initialize graph
        graph.displayGraph();                                                               // Display graph as adjacency list
        
        String start, goal;                                                                 // Accept start and goal nodes
        start = JOptionPane.showInputDialog("Enter the name of start node : ");
        
        goal = JOptionPane.showInputDialog("Enter the name of goal node : ");
        
        graph.setGx(start, 0);                                                              // Set gx=0 for start node 
        open.add(graph.getHeadNode(start));                                                 // Add start node to open list
        parent.set(graph.getIndex(start), "NIL");                                           // Set parent of start NIL


        displayQueue(open);
        displayClosed(closed);
        
        while(!open.isEmpty())                                                              // Process until open list is not empty
        {
            HeadNode temp = open.poll();                                                    // Remove node with minimum fx from open list
            closed.add(temp);                                                               // Add it to closed list
            displayQueue(open);
            displayClosed(closed);
            if(temp.getName().equals(goal))                                                 // Check if goal node is found
            {
  
                System.out.println("\nGoal node '"+temp.getName() + "'  found");
                break;
            }
            else
            {
                ArrayList<Node> neighbours = temp.getNodeList();                            // Get the neighbours of the retrieved node
                for(Node n1:neighbours)                                                     // For all adjacent nodes
                {
                    if(inClosed(n1.getName(), closed))                                      // If node in closed list, process next node
                        continue;
                    if(!inOpen(n1.getName(), open))                                         // Check if not in open list
                    {
                      
                        graph.setFx(n1,temp);                                               // Set fx for neighbour node via current
                        open.add(graph.getHeadNode(n1.getName()));                          // Add it toopen list
                        parent.set(graph.getIndex(n1.getName()), temp.getName());           // Set parent of neighbour node
                    }
                }
                displayQueue(open);
            }
         
            
        }
        
        tracePath(parent, graph, goal);
    }
    
    
    private static void displayQueue(PriorityQueue<HeadNode> open)                          // Fuction to display queue open list
    {
        System.out.print("\nOpen List : ");
        if(open.isEmpty())
        {
            System.out.println("Empty");
            return;
        }
        for(HeadNode n: open)
        {
            System.out.print(n.getName()+"\t");
        }
        System.out.println("");
    }
    
    private static void displayClosed(ArrayList<HeadNode> closed)                          // Fuction to display closed list
    {
        System.out.print("\nClosed List : ");
        if(closed.isEmpty())
        {
            System.out.println("Empty");
            return;
        }
        for(HeadNode n: closed)
        {
            System.out.print(n.getName()+"\t");
        }
        System.out.println("");
    }
    
    private static boolean inClosed(String name, ArrayList<HeadNode> closed)               // Check if node in closed list
    {
        for(HeadNode n: closed)
        {
            if(n.getName().equals(name))
                return true;
        }
        return false;
    }
    
    private static boolean inOpen(String name, PriorityQueue<HeadNode> open)              // Check if node in closed list
    {
        for(HeadNode n: open)
        {
            if(n.getName().equals(name))
                return true;
        }
        return false;
    }
    
    private static void tracePath(ArrayList<String> parent, Graph graph, String goal)       // Function to trace the path
    {
        System.out.println("\n\nPath : ");
        String path = goal;
        String temp = goal;
        while(!parent.get(graph.getIndex(temp)).equals("NIL"))                              // Continue path till parent is not NIL
        {
            temp = parent.get(graph.getIndex(temp));
            path = temp + ", " + path;
        }
        
        System.out.println(path);
    }
}



/*

OUTPUT:


run:

A (hx = 6) : (B,1), (C,3)
B (hx = 4) : (D,2)
C (hx = 3) : (D,5)
D (hx = 1) : 

Fx of node A = 6

Open List : A	

Closed List : Empty

Open List : Empty

Closed List : A	

Fx of node B = 5

Fx of node C = 6

Open List : B	C	

Open List : C	

Closed List : A	B	

Fx of node D = 4

Open List : D	C

Open List : C	

Closed List : A	B	D


Path : 
A, B, D
	

Goal node 'D'  found
BUILD SUCCESSFUL (total time: 1 minute 37 seconds)

*/
------------------------

Node.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


public class Node                                           // Adjacent node name and distance
{
    String name;
    int distance;
    
    public Node(String name, int dist)
    {
        this.name = name;
        this.distance = dist;
    }
    
    public int getDistance() {
        return distance;
    }

    public String getName() {
        return name;
    }

    public void setDistance(int distance) {
        this.distance = distance;
    }

    public void setName(String name) {
        this.name = name;
    }
   
    
}

------------------------
Headnode.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.ArrayList;
import java.util.Iterator;


public class HeadNode                                           // Adjacency list head node
{
    private String name;                                        // node name
    private int gx;                                             // gx value
    private int hx;                                             // heuristic value hx
    private int fx;                                             // fx = gx+hx value
    private ArrayList<Node> adjnodes = new ArrayList<>();       // Adjacent nodes list
    
    public HeadNode()                                           // Initialize gx,hx and fx to infinity 
    {
        gx=hx=999;
        fx = gx+hx;
    }

    public int getGx() {
        return gx;
    }

    public void setGx(int gx) {                                 // Set gx and update fx accordigly
        this.gx = gx;
        setFx(this.gx+hx);
        System.out.println("\nFx of node "+this.name+" = "+this.fx);
    }

    public int getHx() {                                  
        return hx;
    }

    public void setHx(int hx) {                                 // Set hx and update fx accordingly
        this.hx = hx;
        setFx(this.hx+gx);
    }

    public int getFx() {
        return fx;
    }

    public void setFx(int fx) {
        this.fx = fx;
    }
    
    
    
    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setNodeInfo(String name,int distance)           // Set adjacent node name and distance
    {
        Node n = new Node(name,distance);
        adjnodes.add(n);                                        // Add node to list
    }
 
    public ArrayList getNodeList()
    {
        return adjnodes;
    }
    
    public void displayNodeList()                              // Display adjacent nodes list (name,distance)
    {
                
        Iterator i = adjnodes.iterator();
        if(i.hasNext())
        {
            Node temp= (Node)i.next();
            System.out.print("("+temp.getName()+","+temp.getDistance()+")");
        
        }
        while(i.hasNext())
        {
            Node temp= (Node)i.next();
            System.out.print(", ("+temp.getName()+","+temp.getDistance()+")");
        }
    }
    
}

------------------------
graph.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author swaraj
 */
public class Graph {                                                  // Class for graph
    
    ArrayList<HeadNode> headNodesList;
    int n;
    
    public Graph(int size)                                            // Initialize size and head node list
    {
        this.n = size;
        headNodesList = new ArrayList<>();
    }
    
    public void initGraph()                                           // Initialize graph nodes and edges
    {
        Scanner sc = new Scanner(System.in);
        for(int i=0;i<n;i++)                                          // Accept node names and their heuristic values
        {
            
            HeadNode hn = new HeadNode();
            hn.setName(JOptionPane.showInputDialog("Enter the name of node " +(i+1)+" : "));
            hn.setHx(Integer.parseInt(JOptionPane.showInputDialog("Enter the heuristic value of node " +(i+1)+" : ")));
            headNodesList.add(hn);
          
        }
        for(int i=0;i<n;i++)
        {
            HeadNode tempHeadNode = headNodesList.get(i);
            
            while(true)                                              // Accept adjacent nodes and their distances
            {
                String name = tempHeadNode.getName();
                String ans = JOptionPane.showInputDialog("\nDo you want to add any adjacent node to node "+ name + "? (y/n) : ");
                if(ans.equals("n")  || ans.equals("N"))
                    break;
               // sc.skip("\n");
                String tempName=JOptionPane.showInputDialog("Enter the name of adjacent node of "+ name + " : ");
                //sc.skip("\n");
                int tempDistance=Integer.parseInt(JOptionPane.showInputDialog("Enter distance between nodes " + name + " and " + tempName+ " :"));
                    
                tempHeadNode.setNodeInfo(tempName,tempDistance);
                headNodesList.set(i, tempHeadNode);
            
            }
        }
    }
    
    public void displayGraph()                                       // Display graph adjacency list
    {
        for(int i=0;i<n;i++)
        {
            HeadNode tempHeadNode = headNodesList.get(i);
            System.out.print("\n"+ tempHeadNode.getName() + " (hx = "+tempHeadNode.getHx()+") : ");
            tempHeadNode.displayNodeList();
        }
        System.out.println("");
    }
    
    public int getIndex(String name)                                 // Get index for given name
    {
        for(int i=0;i<n;i++)
        {
            HeadNode tempHeadNode = headNodesList.get(i);
            if(tempHeadNode.getName().equals(name))
                return i;
        }
        return -1;
    }
    
    public ArrayList getNeighbours(String node)                      // Get neighbour nodes list
    {
        int headIndex=getIndex(node);
        return headNodesList.get(headIndex).getNodeList();
    }
    
    public void setGx(String name,int gx)                            // Set gx for a node and update adjacency list
    {
        int index = getIndex(name);
        HeadNode node = headNodesList.get(index);
        node.setGx(gx);
        headNodesList.set(index, node);
    }
    
    public HeadNode getHeadNode (String name){                       // Get Head node by name
        return headNodesList.get(getIndex(name));
    }
    
    public void setFx(Node neighbour, HeadNode curr)                 // Set fx for neighbour via current node
    {
        int tempGx = curr.getGx() + neighbour.getDistance();         // Get distance from source to neighbour via current node
        HeadNode adj = getHeadNode(neighbour.getName());             // Get adjacent head node
        if(tempGx >= adj.getGx())                                    // Check if calculated distance is less than previous distance
            return;
        
        adj.setGx(tempGx);                                           // Set gx as calculated distance
        headNodesList.set(getIndex(adj.getName()), adj);             // Update headnode list
    }
}

------------------------
fxcomparator.java

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Comparator;

/**
 *
 * @author swaraj
 */
public class FxComparator implements Comparator<HeadNode>               // Comparator for priority queue based on fx value
{

    @Override
    public int compare(HeadNode o1, HeadNode o2) {
        if(o1.getFx()> o2.getFx())
            return 1;
        else if(o1.getFx() < o2.getFx())
            return -1;
        return 0;
    }
    
}

